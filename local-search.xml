<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MacOS使用Docker运行HA并集成HomeKit</title>
    <link href="/2025/08/18/MacOS%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CHA%E5%B9%B6%E9%9B%86%E6%88%90HomeKit/"/>
    <url>/2025/08/18/MacOS%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CHA%E5%B9%B6%E9%9B%86%E6%88%90HomeKit/</url>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#1-%E6%89%80%E9%9C%80%E6%96%87%E4%BB%B6">1. 所需文件</a></li><li><a href="#2-%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B">2. 安装过程</a></li><li><a href="#3-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8">3. 设置开机自启动</a></li></ul><!-- tocstop --><p>搜索了很多关于Mac安装HomeAssistant的教程，提供的都是UTM虚拟机的安装方式，这种方式开机自启动是一个很大的问题，另外OS版本镜像大，占资源比docker要多。后来在Github Gist找到一篇解决方案，经尝试可行（<strong>需要修改</strong>）。原文链接可参考：<a href="https://gist.github.com/dieu/96cded47544ee48ce0b3c69d529b723c">https://gist.github.com/dieu/96cded47544ee48ce0b3c69d529b723c</a></p><h2><span id="1-所需文件">1. 所需文件</span></h2><p>Mac版本通过Docker安装HomeAssistant集成Homekit最大的问题就是HASS Bridge连不上，通过本文脚本可以实现Docker环境下Bridge连接, <strong>需要严格按照本文的操作流程进行集成操作</strong>。</p><p>需要准备几个文件： </p><ul><li>Dockerfile用于在官方的基础上构建补丁镜像   </li><li><a href="http://docker-entrypoint.sh/">docker-entrypoint.sh</a> docker镜像的入口   </li><li>docker-compose.yml   </li><li><a href="http://dns-sd.sh/">dns-sd.sh</a> 用于解决MacOS下mdns问题   </li><li>configuration.yml 用于homekit的配置。</li></ul><p>我把修改好的所有文件打包到百度云盘:，链接: <a href="https://pan.baidu.com/s/1S0cKbga8A3L1rDXoWEtOgQ">https://pan.baidu.com/s/1S0cKbga8A3L1rDXoWEtOgQ</a> 提取码: x2vc</p><p>所需文件具体内容如下：</p><ol><li>Dockerfile</li></ol><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs docker"><span class="hljs-keyword">FROM</span> homeassistant/home-assistant:stable<br><br><span class="hljs-comment"># Install avahi-daemon in container</span><br><span class="hljs-comment"># https://gnanesh.me/avahi-docker-non-root.html</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">set</span> -ex \</span><br><span class="language-bash">  &amp;&amp; apk --no-cache --no-progress add avahi avahi-tools dbus   \</span><br><span class="language-bash"><span class="hljs-comment">#   Disable default Avahi services</span></span><br>  &amp;&amp; rm /etc/avahi/services/* \<br>  &amp;&amp; rm -rf /var/cache/apk/*<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> docker-entrypoint.sh /usr/local/sbin/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /usr/local/sbin/docker-entrypoint.sh</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/local/sbin/docker-entrypoint.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><ol start="2"><li><a href="http://docker-entrypoint.sh/">docker-entrypoint.sh</a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -euxo pipefail<br><br><span class="hljs-comment"># Start dbus and avahi-daemon</span><br><span class="hljs-built_in">mkdir</span> -p /var/run/dbus/<br><span class="hljs-built_in">rm</span> -f /run/dbus/dbus.pid<br>dbus-uuidgen &gt; /var/lib/dbus/machine-id<br>dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address<br>avahi-daemon --daemonize <br><br><span class="hljs-comment"># Run anything else you want to run before HA starts...</span><br><br><span class="hljs-comment"># Run original entrypoint</span><br><span class="hljs-built_in">exec</span> /init<br></code></pre></td></tr></table></figure><ol start="3"><li>docker-compose.yml</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  homeassistant:<br>    container_name: homeassistant<br>    build: .<br>    volumes:<br>      - ./config:/config<br>      - /etc/localtime:/etc/localtime:ro<br>    environment:<br>      - TZ=Asia/Shanghai<br>    network_mode: host<br>    restart: unless-stopped<br>    privileged: <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><ol start="4"><li><a href="http://dns-sd.sh/">dns-sd.sh</a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash -x</span><br><br><span class="hljs-comment"># register HASS Bridge by getting the avahi-browse output from the homeassistant container</span><br>DNS_SD_NAME=<span class="hljs-string">&quot;HASS Bridge&quot;</span><br><br>LOG_FILE=<span class="hljs-string">&quot;./dns-sd.log&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">prepare_command</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;/usr/local/bin/docker exec -t $(/usr/local/bin/docker ps | grep homeassistant | cut -d&quot; &quot; -f1) avahi-browse -t -r -p -k _hap._tcp | grep -m 1 &quot;HASS Bridge&quot; | cut -d&quot;;&quot; -f5-6,9-10 | awk -F&quot;;&quot; &#x27;</span>\&#x27;<span class="hljs-string">&#x27;&#123;printf &quot;dns-sd -R \&quot;HASS Bridge\&quot; %s %s %s %s\n&quot;, $1, $2, $3, $4&#125;&#x27;</span>\&#x27;<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br>DNS_SD_CMD=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># Declare CMD as a global variable</span><br><br><span class="hljs-function"><span class="hljs-title">run_command</span></span>() &#123;<br>    PREPARE=$(prepare_command)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prepare command: <span class="hljs-variable">$PREPARE</span>&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>    DNS_SD_CMD=$(<span class="hljs-built_in">eval</span> <span class="hljs-variable">$PREPARE</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Running command: <span class="hljs-variable">$DNS_SD_CMD</span>&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>    <span class="hljs-built_in">eval</span> <span class="hljs-variable">$DNS_SD_CMD</span> &gt;&gt; <span class="hljs-variable">$LOG_FILE</span> 2&gt;&amp;1 &amp;<br>    pid=$!<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Command running with PID: <span class="hljs-variable">$pid</span>&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">check_and_run_command</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> pgrep -f <span class="hljs-string">&quot;<span class="hljs-variable">$DNS_SD_NAME</span>&quot;</span> &gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Command is already running. Killing it...&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>        pkill -f <span class="hljs-string">&quot;<span class="hljs-variable">$DNS_SD_NAME</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    run_command<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">check_if_need_run</span></span>() &#123;<br>    PREPARE=$(prepare_command)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prepare command: <span class="hljs-variable">$PREPARE</span>&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>    NEW_DNS_SD_CMD=$(<span class="hljs-built_in">eval</span> <span class="hljs-variable">$PREPARE</span>)<br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$NEW_DNS_SD_CMD</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$DNS_SD_CMD</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DNS_SD_CMD is not the same.&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>        check_and_run_command<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DNS_SD_CMD is the same.&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$LOG_FILE</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>interval=86400  <span class="hljs-comment"># 24 hours in seconds</span><br><br><span class="hljs-comment"># Infinite loop to periodically run the check</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>    check_if_need_run<br>    <span class="hljs-built_in">sleep</span> <span class="hljs-variable">$interval</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="5"><li>configuration.yml, 在当前目录下新建config文件夹，把configuration.yml放进去。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">homekit:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">HASS</span> <span class="hljs-string">Bridge</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">51827</span><br>    <span class="hljs-attr">advertise_ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.183</span><br></code></pre></td></tr></table></figure><p>最终目录结构可以参考：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">HA<br>├── config<br>│   └── configuration<span class="hljs-selector-class">.yml</span><br>├── dns-sd<span class="hljs-selector-class">.sh</span><br>├── docker-compose<span class="hljs-selector-class">.yml</span><br>├── docker-entrypoint<span class="hljs-selector-class">.sh</span><br>└── Dockerfile<br></code></pre></td></tr></table></figure><h2><span id="2-安装过程">2. 安装过程</span></h2><p>docker的安装这里就不赘述了，网上有很多教程，MacOS大家可以安装Docker Desktop或者Orbstack，我这里使用的是Orbstack。</p><ol><li>打开终端。cd 到HA配置文件夹所在目录，检查文件结构是否和截图一致。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image.png" alt="image.png"></p><ol start="2"><li>执行docker镜像编译，打包我们的镜像。这里会拉取homeassistant，如果拉取不下来可以使用<a href="https://dockerproxy.net/">https://dockerproxy.net/</a>拉取镜像。因为构建我们的镜像还需要安装avahi avahi-tools dbus等，所以构建需要一段时间。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose build<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%201.png" alt="image.png"></p><ol start="3"><li>启动镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose up -d<br></code></pre></td></tr></table></figure><ol start="4"><li>打开<a href="http://localhost:8123/config/integrations/dashboard">http://localhost:8123</a> 创建账号并登陆。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%202.png" alt="image.png"></p><ol start="5"><li>添加集成，选择Apple，添加HomeKit Bridge, 选择你需要添加的实体类型，这里随便设置，后期可以修改。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%203.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%204.png" alt="image.png"></p><ol start="6"><li>添加完成会出现通知，点击通知弹出Homekit配对。<strong>这时候就要用到我们的dns-sd.sh脚本,在终端执行这个脚本, 这个脚本可以解决docker环境下mDNS问题</strong>。服务启动后，我们就可以使用iPhone设备配对了。终端关闭会导致Homekit Bridge失去连接，后面的章节将介绍如何开机自启动。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh dns-sd.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%205.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%206.png" alt="image.png"></p><ol start="7"><li>使用家庭App添加配件，扫码会弹出未经授权的设备，忽略警告继续，这样很快设备就能连接上了。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/5E866D32-4B39-4B40-BD7A-664624B9B0F4_1_102_o.jpeg" alt="5E866D32-4B39-4B40-BD7A-664624B9B0F4_1_102_o.jpeg"></p><h2><span id="3-设置开机自启动">3. 设置开机自启动</span></h2><ol><li>首先打开Orbstack，设置开机自启动，方便我们的服务后续能够实现开机自启动，这也是通过Docker安装的一个重大优势，虚拟机形式难以实现开机自启动HA。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kiteflyingee/image_store/img/image%207.png" alt="image.png"></p><ol start="2"><li>设置dns-sd.sh脚本的开机自启动， 打开终端。</li></ol><p>（1）创建启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/Library/LaunchAgents/com.user.dns-sd.plist<br></code></pre></td></tr></table></figure><p>(2) 粘贴如下内容，**注意这里需要替换你的dns-sd.sh存放的路径，**并保存文档。保存文档会自动添加启动项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.user.dns-sd<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Volumes/SSDFull/homeassistant/HA/dns-sd.sh<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 替换为你的dns-sd.sh脚本绝对路径 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>RunAtLoad<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KeepAlive<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>WorkingDirectory<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Volumes/SSDFull/homeassistant/HA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 替换为你的dns-sd.sh脚本所在目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>EnvironmentVariables<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>PATH<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(4) 重启电脑，过2-5分钟会自动启动服务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HomeAssistant, Homekit, MacOS, Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
